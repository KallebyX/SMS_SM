# Issues para Integra√ß√£o GraphQL - GitHub Import

issues:
  - title: "Integrar Training.tsx com useCourses - Substituir dados mock"
    body: |
      ## Descri√ß√£o
      Integrar a p√°gina de Training com o hook useCourses para buscar cursos reais do backend GraphQL.

      ## Prioridade
      üî¥ Alta

      ## Tempo Estimado
      15-20 minutos

      ## Tasks
      - [ ] Importar useCourses hook em Training.tsx
      - [ ] Substituir array `courses` hardcoded por `data?.courses` do useQuery
      - [ ] Implementar filtros funcionais por categoria
      - [ ] Conectar bot√£o "Iniciar Curso" √† mutation enroll()
      - [ ] Mostrar progresso real do usu√°rio via enrollment.progress
      - [ ] Adicionar loading state durante carregamento de cursos
      - [ ] Adicionar error handling com mensagens amig√°veis
      - [ ] Testar inscri√ß√£o em curso
      - [ ] Testar progresso do usu√°rio
      - [ ] Verificar responsividade

      ## Arquivos a Modificar
      - `enterprise/frontend/src/pages/Training.tsx`

      ## GraphQL Utilizado
      ```graphql
      query GET_COURSES
      query GET_MY_COURSES
      mutation ENROLL_IN_COURSE
      mutation COMPLETE_LESSON
      ```

      ## Como Implementar
      ```typescript
      import { useCourses } from '../hooks/useCourses'
      
      const Training: React.FC = () => {
        const { courses, loading, enroll } = useCourses()
        const [activeFilter, setActiveFilter] = useState('all')
        
        const filteredCourses = courses.filter(c => 
          activeFilter === 'all' || c.category === activeFilter
        )
        
        const handleEnroll = async (courseId: string) => {
          await enroll(courseId)
        }
        
        if (loading) return <LoadingSpinner />
        
        return (
          // JSX usando filteredCourses
        )
      }
      ```

    labels:
      - "frontend"
      - "graphql"
      - "priority:high"
      - "training"

  - title: "Integrar Projects.tsx com useProjects - CRUD de Projetos"
    body: |
      ## Descri√ß√£o
      Conectar a p√°gina de Projects ao backend GraphQL para opera√ß√µes CRUD completas.

      ## Prioridade
      üî¥ Alta

      ## Tempo Estimado
      20-25 minutos

      ## Tasks
      - [ ] Importar useProjects hook
      - [ ] Substituir array `projects` por dados do backend
      - [ ] Conectar CreateProjectModal √† mutation createProject()
      - [ ] Implementar Kanban board com dados reais
      - [ ] Conectar cria√ß√£o de tarefas √† mutation createTask()
      - [ ] Implementar atualiza√ß√£o de status de tarefas (updateTask mutation)
      - [ ] Implementar exclus√£o de tarefas (deleteTask mutation)
      - [ ] Adicionar loading states em todas as opera√ß√µes
      - [ ] Adicionar confirma√ß√£o antes de deletar
      - [ ] Testar cria√ß√£o de projeto
      - [ ] Testar CRUD completo de tarefas
      - [ ] Verificar performance com muitos projetos

      ## Arquivos a Modificar
      - `enterprise/frontend/src/pages/Projects.tsx`
      - `enterprise/frontend/src/components/modals/CreateProjectModal.tsx`

      ## GraphQL Utilizado
      ```graphql
      query GET_PROJECTS
      mutation CREATE_PROJECT
      mutation CREATE_TASK
      mutation UPDATE_TASK
      mutation DELETE_TASK
      ```

    labels:
      - "frontend"
      - "graphql"
      - "priority:high"
      - "projects"

  - title: "Integrar Calendar.tsx com useCalendar - Eventos Reais"
    body: |
      ## Descri√ß√£o
      Conectar calend√°rio ao backend para criar e visualizar eventos reais.

      ## Prioridade
      üî¥ Alta

      ## Tempo Estimado
      15-20 minutos

      ## Tasks
      - [ ] Importar useCalendar hook
      - [ ] Substituir array `events` por dados do backend
      - [ ] Conectar CreateEventModal √† mutation createEvent()
      - [ ] Implementar filtros por per√≠odo (mensal, semanal, di√°rio)
      - [ ] Adicionar confirma√ß√£o de presen√ßa aos eventos
      - [ ] Mostrar eventos no calend√°rio visual correto
      - [ ] Implementar navega√ß√£o entre meses
      - [ ] Adicionar loading states
      - [ ] Testar cria√ß√£o de eventos
      - [ ] Testar filtros de per√≠odo

      ## Arquivos a Modificar
      - `enterprise/frontend/src/pages/Calendar.tsx`
      - `enterprise/frontend/src/components/modals/CreateEventModal.tsx`

      ## GraphQL Utilizado
      ```graphql
      query GET_EVENTS
      mutation CREATE_EVENT
      mutation UPDATE_EVENT_ATTENDANCE
      ```

    labels:
      - "frontend"
      - "graphql"
      - "priority:high"
      - "calendar"

  - title: "Integrar Gamification.tsx com useGamification - Conquistas e XP"
    body: |
      ## Descri√ß√£o
      Conectar gamifica√ß√£o ao backend para mostrar conquistas, XP e ranking reais.

      ## Prioridade
      üü° M√©dia

      ## Tempo Estimado
      15 minutos

      ## Tasks
      - [ ] Importar useGamification hook
      - [ ] Substituir arrays `achievements` e `leaderboard` por queries reais
      - [ ] Buscar userStats do backend via query ME
      - [ ] Mostrar progresso real de conquistas
      - [ ] Atualizar XP e level em tempo real
      - [ ] Implementar ranking real de usu√°rios
      - [ ] Adicionar loading states
      - [ ] Testar atualiza√ß√£o de XP
      - [ ] Testar desbloqueio de conquistas

      ## Arquivos a Modificar
      - `enterprise/frontend/src/pages/Gamification.tsx`

      ## GraphQL Utilizado
      ```graphql
      query GET_ACHIEVEMENTS
      query GET_MY_ACHIEVEMENTS
      query ME
      ```

    labels:
      - "frontend"
      - "graphql"
      - "priority:medium"
      - "gamification"

  - title: "Integrar Chat.tsx com useChat - Chat em Tempo Real via WebSocket"
    body: |
      ## Descri√ß√£o
      Implementar chat em tempo real com WebSocket usando subscriptions GraphQL.

      ## Prioridade
      üü° M√©dia

      ## Tempo Estimado
      25-30 minutos

      ## Tasks
      - [ ] Importar useChat hook
      - [ ] Substituir arrays `chats` e `messages` por queries reais
      - [ ] Conectar envio de mensagem √† mutation sendMessage()
      - [ ] Implementar subscription MESSAGE_ADDED para tempo real
      - [ ] Mostrar status online/offline dos usu√°rios
      - [ ] Implementar typing indicators
      - [ ] Adicionar loading states durante envio
      - [ ] Implementar pagina√ß√£o de mensagens antigas
      - [ ] Testar envio de mensagens
      - [ ] Testar recebimento em tempo real
      - [ ] Testar m√∫ltiplos canais

      ## Arquivos a Modificar
      - `enterprise/frontend/src/pages/Chat.tsx`

      ## GraphQL Utilizado
      ```graphql
      query GET_CHANNELS
      query GET_MESSAGES
      mutation SEND_MESSAGE
      subscription MESSAGE_ADDED
      ```

    labels:
      - "frontend"
      - "graphql"
      - "priority:medium"
      - "chat"
      - "websocket"

  - title: "Integrar Policies.tsx com usePolicies - Visualiza√ß√£o PDF"
    body: |
      ## Descri√ß√£o
      Conectar biblioteca de pol√≠ticas ao backend e implementar visualiza√ß√£o real de PDFs.

      ## Prioridade
      üü° M√©dia

      ## Tempo Estimado
      15-20 minutos

      ## Tasks
      - [ ] Importar usePolicies hook
      - [ ] Substituir dados mock por useQuery(GET_POLICIES)
      - [ ] Conectar bot√£o "Confirmar leitura" √† mutation markAsRead()
      - [ ] Implementar visualiza√ß√£o de PDF real do backend
      - [ ] Adicionar tracking de leitura (userRead)
      - [ ] Mostrar badge de pol√≠ticas n√£o lidas
      - [ ] Implementar download de pol√≠ticas
      - [ ] Adicionar loading states
      - [ ] Testar confirma√ß√£o de leitura
      - [ ] Testar visualiza√ß√£o PDF

      ## Arquivos a Modificar
      - `enterprise/frontend/src/pages/Policies.tsx`
      - `enterprise/frontend/src/components/PDFViewer.tsx`

      ## GraphQL Utilizado
      ```graphql
      query GET_POLICIES
      mutation MARK_POLICY_AS_READ
      mutation ACKNOWLEDGE_POLICY
      ```

    labels:
      - "frontend"
      - "graphql"
      - "priority:medium"
      - "policies"

  - title: "Integrar Links.tsx com useLinks - Links √öteis"
    body: |
      ## Descri√ß√£o
      Substituir links mock por dados reais do backend.

      ## Prioridade
      üü¢ Baixa

      ## Tempo Estimado
      10-15 minutos

      ## Tasks
      - [ ] Importar useLinks hook
      - [ ] Substituir array `links` por useQuery(GET_LINKS)
      - [ ] Implementar filtros por categoria
      - [ ] Adicionar contador de visitas
      - [ ] Implementar busca de links
      - [ ] Adicionar loading states
      - [ ] Testar navega√ß√£o para links externos
      - [ ] Testar links internos

      ## Arquivos a Modificar
      - `enterprise/frontend/src/pages/Links.tsx`

      ## GraphQL Utilizado
      ```graphql
      query GET_LINKS
      ```

    labels:
      - "frontend"
      - "graphql"
      - "priority:low"
      - "links"

  - title: "Integrar Settings.tsx com UPDATE_PROFILE - Salvar Configura√ß√µes"
    body: |
      ## Descri√ß√£o
      Implementar salvamento real de configura√ß√µes do usu√°rio via mutation.

      ## Prioridade
      üü° M√©dia

      ## Tempo Estimado
      20-25 minutos

      ## Tasks
      - [ ] Criar mutation UPDATE_PROFILE em mutations.ts
      - [ ] Conectar handleSave() √† mutation
      - [ ] Implementar valida√ß√£o de campos antes de salvar
      - [ ] Adicionar loading state durante salvamento
      - [ ] Mostrar toast de sucesso/erro
      - [ ] Recarregar dados do usu√°rio ap√≥s salvar
      - [ ] Adicionar confirma√ß√£o para mudan√ßas cr√≠ticas
      - [ ] Implementar cancelamento de altera√ß√µes
      - [ ] Testar salvamento de configura√ß√µes
      - [ ] Testar valida√ß√£o de campos

      ## Arquivos a Modificar
      - `enterprise/frontend/src/pages/Settings.tsx`
      - `enterprise/frontend/src/graphql/mutations.ts`

      ## GraphQL Utilizado
      ```graphql
      mutation UPDATE_PROFILE
      query ME
      ```

    labels:
      - "frontend"
      - "graphql"
      - "priority:medium"
      - "settings"

  - title: "Integrar Analytics.tsx com dados reais do backend"
    body: |
      ## Descri√ß√£o
      Substituir gr√°ficos mock por m√©tricas reais do banco de dados.

      ## Prioridade
      üü° M√©dia

      ## Tempo Estimado
      20-25 minutos

      ## Tasks
      - [ ] Criar query GET_ANALYTICS no backend
      - [ ] Substituir dados mock dos gr√°ficos por dados reais
      - [ ] Implementar filtros por per√≠odo (7d, 30d, 90d, 1y)
      - [ ] Conectar KPIs ao backend (usu√°rios ativos, projetos, etc)
      - [ ] Atualizar m√©tricas em tempo real
      - [ ] Implementar exporta√ß√£o de relat√≥rios (PDF/Excel)
      - [ ] Adicionar compara√ß√£o com per√≠odo anterior
      - [ ] Adicionar loading states
      - [ ] Testar m√©tricas reais
      - [ ] Testar filtros de per√≠odo

      ## Arquivos a Modificar
      - `enterprise/frontend/src/pages/Analytics.tsx`
      - `enterprise/frontend/src/graphql/queries.ts`

      ## GraphQL Utilizado
      ```graphql
      query GET_ANALYTICS
      query GET_DASHBOARD_METRICS
      ```

    labels:
      - "frontend"
      - "graphql"
      - "priority:medium"
      - "analytics"

  - title: "Integrar Admin.tsx com gest√£o de usu√°rios e permiss√µes"
    body: |
      ## Descri√ß√£o
      Implementar CRUD completo de usu√°rios no painel administrativo.

      ## Prioridade
      üî¥ Alta

      ## Tempo Estimado
      30-40 minutos

      ## Tasks
      - [ ] Criar queries GET_USERS, GET_LOGS no backend
      - [ ] Criar mutations CREATE_USER, UPDATE_USER, DELETE_USER
      - [ ] Implementar listagem de usu√°rios real
      - [ ] Implementar cria√ß√£o de usu√°rio com valida√ß√£o
      - [ ] Implementar edi√ß√£o de usu√°rio
      - [ ] Implementar exclus√£o de usu√°rio (com confirma√ß√£o)
      - [ ] Implementar gerenciamento de permiss√µes (roles)
      - [ ] Adicionar filtros por role (ADMIN, MANAGER, USER)
      - [ ] Adicionar busca de usu√°rios
      - [ ] Implementar pagina√ß√£o se necess√°rio
      - [ ] Adicionar loading states
      - [ ] Testar CRUD completo
      - [ ] Testar mudan√ßa de permiss√µes

      ## Arquivos a Modificar
      - `enterprise/frontend/src/pages/Admin.tsx`
      - `enterprise/frontend/src/pages/UserManagement.tsx`
      - `enterprise/frontend/src/graphql/queries.ts`
      - `enterprise/frontend/src/graphql/mutations.ts`
      - `enterprise/backend/src/graphql/typeDefs.ts` (se necess√°rio)
      - `enterprise/backend/src/graphql/resolvers.ts` (se necess√°rio)

      ## GraphQL a Criar
      ```graphql
      query GetUsers {
        users {
          id email username firstName lastName role
          department position totalXP level isOnline createdAt
        }
      }
      
      mutation CreateUser($input: CreateUserInput!) {
        createUser(input: $input) {
          id email username firstName lastName role
        }
      }
      ```

    labels:
      - "frontend"
      - "backend"
      - "graphql"
      - "priority:high"
      - "admin"

