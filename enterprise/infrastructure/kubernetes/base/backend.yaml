apiVersion: apps/v1
kind: Deployment
metadata:
  name: sms-sm-backend
  namespace: sms-sm-enterprise
  labels:
    app: sms-sm-backend
    component: backend
    tier: application
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: sms-sm-backend
  template:
    metadata:
      labels:
        app: sms-sm-backend
        component: backend
        tier: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sms-sm-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: backend
        image: ghcr.io/your-org/sms-sm-enterprise/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 4000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "4000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: auth-secrets
              key: jwt-secret
        envFrom:
        - configMapRef:
            name: backend-config
        - secretRef:
            name: backend-secrets
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 4000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 4000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: temp-dir
          mountPath: /tmp
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: temp-dir
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - sms-sm-backend
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: sms-sm-backend-service
  namespace: sms-sm-enterprise
  labels:
    app: sms-sm-backend
    component: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 4000
    protocol: TCP
    name: http
  selector:
    app: sms-sm-backend
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: sms-sm-enterprise
  labels:
    app: sms-sm-backend
data:
  LOG_LEVEL: "info"
  CORS_ORIGIN: "https://app.sms-sm.health"
  ENABLE_GRAPHQL_PLAYGROUND: "false"
  ENABLE_INTROSPECTION: "false"
  ENABLE_ANALYTICS: "true"
  ENABLE_CACHING: "true"
  ENABLE_RATE_LIMITING: "true"
  REQUEST_TIMEOUT: "30000"
  CLUSTER_WORKERS: "0"
  DEFAULT_LOCALE: "en-US"
  SUPPORTED_LOCALES: "en-US,pt-BR,es-ES,fr-FR,de-DE,it-IT,ja-JP,ko-KR,zh-CN,ar-SA"
---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secrets
  namespace: sms-sm-enterprise
  labels:
    app: sms-sm-backend
type: Opaque
data:
  SENTRY_DSN: ""  # Base64 encoded
  SENDGRID_API_KEY: ""  # Base64 encoded
  AWS_ACCESS_KEY_ID: ""  # Base64 encoded
  AWS_SECRET_ACCESS_KEY: ""  # Base64 encoded
  STRIPE_SECRET_KEY: ""  # Base64 encoded