// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  password      String
  firstName     String
  lastName      String
  avatar        String?
  role          UserRole @default(USER)
  department    String?
  position      String?
  
  // Gamification
  totalXP       Int      @default(0)
  level         Int      @default(1)
  weeklyXP      Int      @default(0)
  
  // Activity tracking
  lastActive    DateTime @default(now())
  isOnline      Boolean  @default(false)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  enrollments   CourseEnrollment[]
  achievements  UserAchievement[]
  messages      Message[]
  events        Event[]
  tasks         Task[]
  projects      ProjectMember[]
  readPolicies  PolicyRead[]
  
  @@map("users")
}

model Course {
  id            String            @id @default(cuid())
  title         String
  description   String
  thumbnail     String?
  category      String
  difficulty    CourseDifficulty
  xpReward      Int               @default(0)
  estimatedTime String
  isActive      Boolean           @default(true)
  
  // Timestamps
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  // Relations
  lessons       Lesson[]
  enrollments   CourseEnrollment[]
  
  @@map("courses")
}

model Lesson {
  id            String      @id @default(cuid())
  title         String
  content       String
  videoUrl      String?
  order         Int
  xpReward      Int         @default(10)
  
  // Relations
  courseId      String
  course        Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completions   LessonCompletion[]
  
  @@map("lessons")
}

model CourseEnrollment {
  id            String    @id @default(cuid())
  enrolledAt    DateTime  @default(now())
  completedAt   DateTime?
  progress      Int       @default(0) // Percentage 0-100
  
  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model LessonCompletion {
  id            String   @id @default(cuid())
  completedAt   DateTime @default(now())
  
  // Relations
  userId        String
  lessonId      String
  lesson        Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("lesson_completions")
}

model Achievement {
  id            String            @id @default(cuid())
  title         String
  description   String
  icon          String
  xpReward      Int               @default(0)
  type          AchievementType
  condition     String            // JSON string with achievement conditions
  
  // Relations
  userAchievements UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  unlockedAt    DateTime    @default(now())
  
  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Message {
  id            String      @id @default(cuid())
  content       String
  type          MessageType @default(TEXT)
  fileUrl       String?
  fileName      String?
  isEdited      Boolean     @default(false)
  
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  senderId      String
  sender        User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  channelId     String
  channel       Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model Channel {
  id            String    @id @default(cuid())
  name          String
  description   String?
  type          ChannelType @default(PUBLIC)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  messages      Message[]
  members       ChannelMember[]
  
  @@map("channels")
}

model ChannelMember {
  id            String   @id @default(cuid())
  joinedAt      DateTime @default(now())
  role          ChannelRole @default(MEMBER)
  
  // Relations
  userId        String
  channelId     String
  channel       Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  @@unique([userId, channelId])
  @@map("channel_members")
}

model Event {
  id            String    @id @default(cuid())
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  type          EventType @default(MEETING)
  location      String?
  isAllDay      Boolean   @default(false)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  organizerId   String
  organizer     User      @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  attendees     EventAttendee[]
  
  @@map("events")
}

model EventAttendee {
  id            String          @id @default(cuid())
  status        AttendanceStatus @default(PENDING)
  
  // Relations
  userId        String
  eventId       String
  event         Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventId])
  @@map("event_attendees")
}

model Project {
  id            String         @id @default(cuid())
  name          String
  description   String?
  status        ProjectStatus  @default(ACTIVE)
  priority      ProjectPriority @default(MEDIUM)
  startDate     DateTime?
  dueDate       DateTime?
  
  // Timestamps
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  tasks         Task[]
  members       ProjectMember[]
  
  @@map("projects")
}

model ProjectMember {
  id            String      @id @default(cuid())
  role          ProjectRole @default(MEMBER)
  joinedAt      DateTime    @default(now())
  
  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId     String
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, projectId])
  @@map("project_members")
}

model Task {
  id            String      @id @default(cuid())
  title         String
  description   String?
  status        TaskStatus  @default(TODO)
  priority      TaskPriority @default(MEDIUM)
  dueDate       DateTime?
  
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  assigneeId    String?
  assignee      User?       @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  projectId     String
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("tasks")
}

model Policy {
  id            String       @id @default(cuid())
  title         String
  content       String
  version       String       @default("1.0")
  category      String
  isActive      Boolean      @default(true)
  requiresAcknowledgment Boolean @default(false)
  
  // Timestamps
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  reads         PolicyRead[]
  
  @@map("policies")
}

model PolicyRead {
  id            String   @id @default(cuid())
  readAt        DateTime @default(now())
  acknowledged  Boolean  @default(false)
  
  // Relations
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  policyId      String
  policy        Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, policyId])
  @@map("policy_reads")
}

model Link {
  id            String     @id @default(cuid())
  title         String
  url           String
  description   String?
  category      LinkCategory
  isActive      Boolean    @default(true)
  
  // Timestamps
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  @@map("links")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum AchievementType {
  COURSE_COMPLETION
  XP_MILESTONE
  LOGIN_STREAK
  COMMUNITY_PARTICIPATION
  SPECIAL_EVENT
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
}

enum ChannelType {
  PUBLIC
  PRIVATE
  DIRECT
}

enum ChannelRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum EventType {
  MEETING
  TRAINING
  DEADLINE
  HOLIDAY
  OTHER
}

enum AttendanceStatus {
  PENDING
  ACCEPTED
  DECLINED
  MAYBE
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LinkCategory {
  SYSTEM
  TRAINING
  SUPPORT
  EXTERNAL
}